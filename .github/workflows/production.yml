name: Production CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily
    - cron: '0 2 * * *'

env:
  GO_VERSION: '1.22'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'dinari-blockchain'

jobs:
  # PHASE 1: Security Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'

      - name: Run Nancy (dependency check)
        run: |
          go install github.com/sonatype-nexus-community/nancy@latest
          go list -json -m all | nancy sleuth

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # PHASE 2: Code Quality & Linting
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout 5m --config .golangci.yml

      - name: Check code formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run 'gofmt -s -w .'"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run staticcheck
        uses: dominikh/staticcheck-action@v1.3.0
        with:
          version: "2023.1.6"

  # PHASE 3: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run unit tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out

      - name: Check test coverage
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Coverage ${COVERAGE}% is below 80% threshold"
            exit 1
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests

  # PHASE 4: Fuzzing Tests
  fuzz-tests:
    name: Fuzzing Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run fuzzing tests
        run: |
          # Run each fuzz test for 5 minutes
          go test -fuzz=FuzzTransaction -fuzztime=5m ./test/fuzz/
          go test -fuzz=FuzzBlock -fuzztime=5m ./test/fuzz/
          go test -fuzz=FuzzSignature -fuzztime=5m ./test/fuzz/

  # PHASE 5: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    services:
      badgerdb:
        image: dgraph/badger:latest
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run integration tests
        run: |
          go test -v -tags=integration ./test/integration/...

      - name: Test multi-node network
        run: |
          ./scripts/test/run-network-test.sh

  # PHASE 6: Performance Benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run benchmarks
        run: |
          go test -bench=. -benchmem -benchtime=10s ./test/benchmark/... | tee benchmark-results.txt

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'go'
          output-file-path: benchmark-results.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # PHASE 7: Build Docker Image
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}

      - name: Run Trivy on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'

  # PHASE 8: Security Penetration Testing
  penetration-tests:
    name: Penetration Tests
    runs-on: ubuntu-latest
    needs: [build-image]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run attack simulations
        run: |
          go test -v -tags=pentest ./test/pentest/...

      - name: Test DDoS resilience
        run: |
          ./scripts/test/ddos-simulation.sh

      - name: Test double-spend attempts
        run: |
          go test -v ./test/pentest/double_spend_test.go

  # PHASE 9: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-image, penetration-tests]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.dinari.network
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy to Kubernetes staging
        run: |
          kubectl config use-context staging
          kubectl set image deployment/dinari-node \
            dinari-node=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -n dinari-staging

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/dinari-node -n dinari-staging --timeout=5m

      - name: Run smoke tests
        run: |
          ./scripts/test/smoke-tests.sh https://staging.dinari.network

  # PHASE 10: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-image, penetration-tests]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://mainnet.dinari.network
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Create backup before deployment
        run: |
          ./scripts/backup/create-snapshot.sh

      - name: Deploy to Kubernetes production (canary)
        run: |
          kubectl config use-context production
          # Deploy canary with 10% traffic
          kubectl set image deployment/dinari-node-canary \
            dinari-node=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -n dinari-production

      - name: Wait for canary rollout
        run: |
          kubectl rollout status deployment/dinari-node-canary -n dinari-production --timeout=5m

      - name: Monitor canary metrics (15 min)
        run: |
          ./scripts/monitoring/monitor-canary.sh 15

      - name: Full production rollout
        run: |
          kubectl set image deployment/dinari-node \
            dinari-node=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -n dinari-production

      - name: Wait for production rollout
        run: |
          kubectl rollout status deployment/dinari-node -n dinari-production --timeout=10m

      - name: Run production smoke tests
        run: |
          ./scripts/test/smoke-tests.sh https://mainnet.dinari.network

      - name: Notify deployment success
        if: success()
        run: |
          ./scripts/notifications/send-slack-notification.sh "✅ Production deployment successful: ${{ github.sha }}"

      - name: Rollback on failure
        if: failure()
        run: |
          kubectl rollout undo deployment/dinari-node -n dinari-production
          ./scripts/notifications/send-slack-notification.sh "🚨 Production deployment failed - rolled back"

  # PHASE 11: Post-Deployment Monitoring
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Monitor metrics for 1 hour
        run: |
          ./scripts/monitoring/post-deployment-monitor.sh 60

      - name: Check for alerts
        run: |
          ./scripts/monitoring/check-alerts.sh

      - name: Generate deployment report
        run: |
          ./scripts/reporting/deployment-report.sh ${{ github.sha }}