---
# Namespace for Dinari Blockchain
apiVersion: v1
kind: Namespace
metadata:
  name: dinari-production
  labels:
    app: dinari-blockchain
    environment: production

---
# ConfigMap for Dinari Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: dinari-config
  namespace: dinari-production
data:
  config.yaml: |
    network:
      chain_id: 1
      max_peers: 50
      min_peers: 10
      listen_port: 9000
      
    rpc:
      listen_addr: "0.0.0.0:8545"
      cors_origins: ["*"]
      max_connections: 1000
      
    security:
      enable_rate_limiting: true
      max_requests_per_second: 100
      enable_ddos_protection: true
      enable_mev_protection: true
      
    consensus:
      block_time: 15
      difficulty_adjustment_interval: 120
      enable_checkpoints: true
      
    storage:
      data_dir: "/data/dinari"
      max_table_size: 67108864
      num_compactors: 4
      enable_compression: true
      
    monitoring:
      enable_metrics: true
      metrics_port: 9090
      enable_profiling: true
      
    logging:
      level: "info"
      format: "json"
      output: "stdout"

  security.yaml: |
    rate_limiting:
      enabled: true
      requests_per_second: 100
      burst_size: 200
      
    ddos_protection:
      max_connections_per_ip: 10
      ban_duration: 3600
      enable_circuit_breaker: true
      
    mev_protection:
      enable_fair_ordering: true
      enable_commit_reveal: false
      enable_batch_auction: true
      
    audit:
      enable_audit_trail: true
      export_to_siem: true
      retention_days: 90

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: dinari-secrets
  namespace: dinari-production
type: Opaque
stringData:
  # These should be properly encrypted in production
  encryption_key: "CHANGE_ME_IN_PRODUCTION"
  admin_token: "CHANGE_ME_IN_PRODUCTION"

---
# PersistentVolumeClaim for blockchain data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: dinari-data-pvc
  namespace: dinari-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Gi
  storageClassName: fast-ssd # Use SSD storage for performance

---
# StatefulSet for Dinari nodes
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dinari-node
  namespace: dinari-production
  labels:
    app: dinari-node
    version: v1.0.0
spec:
  serviceName: dinari-node-headless
  replicas: 5
  selector:
    matchLabels:
      app: dinari-node
  template:
    metadata:
      labels:
        app: dinari-node
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Init container for permissions
      initContainers:
      - name: init-permissions
        image: busybox:1.35
        command: ['sh', '-c', 'chown -R 1000:1000 /data']
        volumeMounts:
        - name: data
          mountPath: /data
        securityContext:
          runAsUser: 0
      
      containers:
      - name: dinari-node
        image: dinari-blockchain:v1.0.0
        imagePullPolicy: IfNotPresent
        
        # Resource limits
        resources:
          requests:
            cpu: "2"
            memory: "4Gi"
          limits:
            cpu: "4"
            memory: "8Gi"
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
        
        # Ports
        ports:
        - name: rpc
          containerPort: 8545
          protocol: TCP
        - name: p2p
          containerPort: 9000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Environment variables
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        # Volume mounts
        volumeMounts:
        - name: data
          mountPath: /data
        - name: config
          mountPath: /etc/dinari/config.yaml
          subPath: config.yaml
          readOnly: true
        - name: security-config
          mountPath: /etc/dinari/security.yaml
          subPath: security.yaml
          readOnly: true
        - name: secrets
          mountPath: /etc/dinari/secrets
          readOnly: true
        - name: tmp
          mountPath: /tmp
        
        # Liveness probe
        livenessProbe:
          httpGet:
            path: /health
            port: 8545
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Readiness probe
        readinessProbe:
          httpGet:
            path: /ready
            port: 8545
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        # Startup probe (for slow starts)
        startupProbe:
          httpGet:
            path: /health
            port: 8545
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 30
      
      # Volumes
      volumes:
      - name: config
        configMap:
          name: dinari-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: security-config
        configMap:
          name: dinari-config
          items:
          - key: security.yaml
            path: security.yaml
      - name: secrets
        secret:
          secretName: dinari-secrets
      - name: tmp
        emptyDir: {}
      
      # Pod anti-affinity for high availability
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - dinari-node
            topologyKey: kubernetes.io/hostname
      
      # Tolerations for dedicated nodes
      tolerations:
      - key: "blockchain"
        operator: "Equal"
        value: "dinari"
        effect: "NoSchedule"
  
  # Volume claim templates
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 500Gi

---
# Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: dinari-node-headless
  namespace: dinari-production
  labels:
    app: dinari-node
spec:
  clusterIP: None
  selector:
    app: dinari-node
  ports:
  - name: rpc
    port: 8545
    targetPort: 8545
  - name: p2p
    port: 9000
    targetPort: 9000

---
# Service for RPC API
apiVersion: v1
kind: Service
metadata:
  name: dinari-rpc
  namespace: dinari-production
  labels:
    app: dinari-node
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: LoadBalancer
  selector:
    app: dinari-node
  ports:
  - name: rpc
    port: 8545
    targetPort: 8545
    protocol: TCP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600

---
# Service for P2P networking
apiVersion: v1
kind: Service
metadata:
  name: dinari-p2p
  namespace: dinari-production
  labels:
    app: dinari-node
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: LoadBalancer
  selector:
    app: dinari-node
  ports:
  - name: p2p
    port: 9000
    targetPort: 9000
    protocol: TCP

---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: dinari-node-hpa
  namespace: dinari-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: dinari-node
  minReplicas: 5
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: dinari-node-pdb
  namespace: dinari-production
spec:
  minAvailable: 3
  selector:
    matchLabels:
      app: dinari-node

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: dinari-node-netpol
  namespace: dinari-production
spec:
  podSelector:
    matchLabels:
      app: dinari-node
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow RPC from anywhere
  - from:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 8545
  # Allow P2P from anywhere
  - from:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 9000
  # Allow metrics from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  # Allow DNS
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: UDP
      port: 53
  # Allow outbound connections
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: dinari-node
  namespace: dinari-production
  labels:
    app: dinari-node
spec:
  selector:
    matchLabels:
      app: dinari-node
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# PrometheusRule for alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: dinari-alerts
  namespace: dinari-production
spec:
  groups:
  - name: dinari-blockchain
    interval: 30s
    rules:
    - alert: DinariNodeDown
      expr: up{job="dinari-node"} == 0
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "Dinari node is down"
        description: "Dinari node {{ $labels.pod }} has been down for more than 5 minutes"
    
    - alert: DinariHighMemoryUsage
      expr: container_memory_usage_bytes{pod=~"dinari-node.*"} / container_spec_memory_limit_bytes{pod=~"dinari-node.*"} > 0.9
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "High memory usage on Dinari node"
        description: "Memory usage is above 90% on {{ $labels.pod }}"
    
    - alert: DinariHighCPUUsage
      expr: rate(container_cpu_usage_seconds_total{pod=~"dinari-node.*"}[5m]) > 0.8
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "High CPU usage on Dinari node"
        description: "CPU usage is above 80% on {{ $labels.pod }}"
    
    - alert: DinariBlockProductionSlow
      expr: rate(dinari_blocks_processed_total[5m]) < 0.0667 # Less than 1 block per 15 seconds
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "Block production is slow"
        description: "Block production rate is below expected"
    
    - alert: DinariLowPeerCount
      expr: dinari_peer_count < 10
      for: 15m
      labels:
        severity: warning
      annotations:
        summary: "Low peer count"
        description: "Peer count is below 10: {{ $value }}"